type Base = "Vanilla" | "Chocolete" | "Coffee";
type Topping = "nuts" | "raisins" | "syrup";

export interface HasFormatter {
  format(): string;
}

class MenuItem implements HasFormatter {
  private title: string;
  private price: number;

  constructor(title: string, price: number) {
    this.price = price;
    this.title = title;
  }
  details = (): string => {
    return `${this.title} :: $${this.price}`;
  };

  format = (): string => {
    return `This menu item is ${this.title} and the price is ${this.price}`;
  };
}

class IceCream extends MenuItem {
  private base: Base = "Coffee";
  private toppings: string[] = [];

  constructor(title: string, price: number) {
    super(title, price);
  }

  selectBase = (base: Base): void => {
    this.base = base;
  };

  addTopings = (topping: string): void => {
    this.toppings.push(topping);
  };

  removeToppings = (topping: string): void => {
    this.toppings = this.toppings.filter((t) => t !== topping);
  };

  // format = (): string => {
  //   return `This menu item is ${this.title} and the price is ${this.price}`;
  // };
}

export default IceCream;
